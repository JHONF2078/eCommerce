
services:
  orders-microservice:
    container_name: orders-microservice
    build:
      context: ./src/OrdersService
      dockerfile: OrdersService.API/Dockerfile
    environment:
      # deshabilitar DOTNET_LAUNCH_PROFILE en tu archivo docker-compose.override.yml:
      # y colocar el flag  --no-launch-profile, en el dockerfile de tu microservicio
      # para evitar que se use el launchSettings.json de tu proyecto
      DOTNET_LAUNCH_PROFILE: ""
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      MONGODB_HOST: ${MONGODB_HOST}
      MONGODB_PORT: ${MONGODB_PORT}
      MONGODB_DATABASE: ${MONGODB_DATABASE}
      USERSMICROSERVICENAME: ${USERSMICROSERVICENAME}
      USERSMICROSERVICEPORT: ${USERSERVICE_PORT}
    ports:
      - "${ORDERSSERVICE_PORT}:${ORDERSSERVICE_PORT}"
    networks:
      - orders-mongodb-network
      - ecommerce-network
    depends_on:
      - mongo-container

  mongo-container:
    container_name: mongo-container
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - ./mongodb-init:/docker-entrypoint-initdb.d
      - mongodbdata:/data/db
    networks:
      - orders-mongodb-network


  products-microservice:
    container_name: products-microservice
    build:
      context: ./src/ProductsService
      dockerfile: ProductsService.API/Dockerfile
    environment:
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSLQ_PORT: ${MYSQL_PORT}
    ports:
      - "${PRODUCTSERVICE_PORT}:${PRODUCTSERVICE_PORT}"
    networks:
      - products-mysql-network
      - ecommerce-network
    depends_on:
      - mysql-container


  mysql-container:
    container_name: mysql-container
    image: mysql:8.3.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysqldata:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - products-mysql-network


  users-microservice:
    container_name: users-microservice
    build:
      context: ./src/UsersService
      dockerfile: UsersService.API/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      ConnectionStrings__PostgresConnection: ${CONNECTIONSTRING_USERS}
    ports:
      - "${USERSERVICE_PORT}:${USERSERVICE_PORT}"
    networks:
      - users-postgres-network
      - ecommerce-network
    depends_on:
      - postgres-container

  postgres-container:
    container_name: postgres-container
    image: postgres:16.1
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d/
    networks:
      - ecommerce-network


volumes:
  pgdata:
  mysqldata:
  mongodbdata:


networks:
  orders-mongodb-network:
    driver: bridge
  products-mysql-network:
    driver: bridge
  users-postgres-network:
    driver: bridge
  ecommerce-network:
    driver: bridge
