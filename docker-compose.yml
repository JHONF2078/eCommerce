
services:
  users-microservice:
    container_name: users-microservice
    build:
      context: ./src/UsersService
      dockerfile: UsersService.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-MyStrongPassword}
      - DB_PASSWORD=${DB_PASSWORD:-MyStrongPassword}
      - ConnectionStrings__DefaultConnection=${CONNECTIONSTRING_USERS}
    ports:
      - "${USERSERVICE_PORT}:${USERSERVICE_PORT}"
    networks:
      - ecommerce-network
    depends_on:
      - postgres-container

  postgres-container:
    container_name: postgres-container
    image: postgres:16.1
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD:-MyStrongPassword}
      - POSTGRES_DB=eCommerceUsers
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d/
    networks:
      - ecommerce-network

  products-microservice:
    container_name: products-microservice
    build:
      context: ./src/ProductsService
      dockerfile: ProductsService.API/Dockerfile
    environment:
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      ASPNETCORE_URLS: http://+:9091
    ports:
      - "${PRODUCTSERVICE_PORT}:${PRODUCTSERVICE_PORT}"
    networks:
      - ecommerce-network

  mysql-container:
    container_name: mysql-container
    image: mysql:8.3.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-MyStrongPassword}
    ports:
      - "3306:3306"
    volumes:
      - mysqldata:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network
    hostname: mysql-host-productsmicroservice

volumes:
  pgdata:
  mysqldata:

networks:
  ecommerce-network:
    driver: bridge
