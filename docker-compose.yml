
services:
  users-microservice:
    container_name: users-microservice
    build:
      context: ./src/UsersService
      dockerfile: UsersService.API/Dockerfile
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD:-MyStrongPassword}
      - DB_PASSWORD=${DB_PASSWORD:-MyStrongPassword}
      - ConnectionStrings__DefaultConnection=Host=postgres-container;Port=5432;Username=postgres;Database=eCommerceUsers
    ports:
      - "5001:5001"
    networks:
      - ecommerce-network
    depends_on:
      - postgres-container

  postgres-container:
    container_name: postgres-container
    image: postgres:16.1
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD:-MyStrongPassword}
      - POSTGRES_DB=eCommerceUsers
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d/
    networks:
      - ecommerce-network

  products-microservice:
    container_name: products-microservice
    build:
      context: ./src/ProductsService
      dockerfile: ProductsService.API/Dockerfile
    environment:
      MYSQL_HOST: mysql-host-productsmicroservice
      MYSQL_PASSWORD: admin
    ports:
      - "8080:8080"
    networks:
      - ecommerce-network

  mysql-container:
    container_name: mysql-container
    image: mysql:8.3.0
    environment:
      MYSQL_ROOT_PASSWORD: admin
    ports:
      - "3306:3306"
    volumes:
      - mysqldata:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network
    hostname: mysql-host-productsmicroservice

volumes:
  pgdata:
  mysqldata:

networks:
  ecommerce-network:
    driver: bridge
